
#Область ПрограммныйИнтерфейс

Функция СоставФормулы(Формулы) Экспорт
	
	ТекстыФормул = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Формулы, "Формула");
	
	Для каждого КлючЗначение Из ТекстыФормул Цикл
		Состав = СтрРазделить(КлючЗначение.Значение, " ", Ложь);
		ТекстыФормул[КлючЗначение.Ключ] = Состав;
	КонецЦикла;
	
	Возврат ТекстыФормул;
	
КонецФункции

// Рекурсивно рассчитывает формулу и возвращает числовой результат
//
// Параметры:
//  Формулы		 - Массив - Массив из элеметов СправочникюФормулы
//  Аргументы	 - Соответствие - ключом оотвествия является строка - Наименование формулы,а
//                                , а значением - числовой параметр
// 
// Возвращаемое значение:
//  Соотвествие - ключом являктся ссылка на Справочник.Формула
//
Функция РасссчитатьЗначенияФормул(Формулы, Аргументы) Экспорт
	
	ТекстыФормул = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Формулы, "Формула");
	
	РезультатРасчета = Новый Соответствие;
	Для каждого КлючИЗначение Из ТекстыФормул Цикл
		Если КлючИЗначение.Ключ = Справочники.Формулы.Сумма Тогда
			РезультатРасчета.Вставить(КлючИЗначение.Ключ, Аргументы["Цена"]);
		Иначе
			РезультатРасчета.Вставить(КлючИЗначение.Ключ, РассчитатьФормулу(КлючИЗначение.Значение, Аргументы));
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатРасчета;
	
КонецФункции

Функция РассчитатьФормулу(Формула, Аргументы) Экспорт
	
	Если ТипЗнч(Формула) = Тип("СправочникСсылка.Формулы") Тогда
		ТекстФормулы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Формула, "Формула");
	ИначеЕсли ТипЗнч(Формула) = Тип("Строка") Тогда
		ТекстФормулы = Формула;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст формулы %1 не определен'; en = 'Formula''s %1 text is not defined'"), Формула);
	КонецЕсли;
	
	СоставФормулы = Новый Массив;
	ТекстФормулыРекурсивно(ТекстФормулы, СоставФормулы, Аргументы);
	ТекстФормулы = СтрСоединить(СоставФормулы, " ");
	
	Для каждого КлючЗначениеАргумента Из Аргументы Цикл
		ТекстФормулы = СтрЗаменить(ТекстФормулы, 
			КлючЗначениеАргумента.Ключ, ЭкранироватьЧисло(КлючЗначениеАргумента.Значение));
	КонецЦикла;
	
	Возврат ВычислитьФормулу(ТекстФормулы);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ПолучитьПредставлениеФормулы(Данные);
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля = Новый Массив;
	Поля.Добавить("Формула");
	Поля.Добавить("Сокращение");
	
КонецПроцедуры

Функция ПолучитьПредставлениеФормулы(ФормулаОбъект)
	
	Представление = СтрШаблон("%1 = %2", ФормулаОбъект.Сокращение, ФормулаОбъект.Формула);
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = "<Формула не задана>";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстФормулыРекурсивно(знач ТекстФормулы, Результат, Аргументы)
	
	ПеременныеФормулы = СтрРазделить(ТекстФормулы, " ", Ложь);
	
	Для каждого Переменная Из ПеременныеФормулы Цикл
		ФормулаСсылка = Справочники.Формулы.НайтиПоРеквизиту("Сокращение", Переменная);
		Если ЗначениеЗаполнено(ФормулаСсылка) Тогда
			//ТекстФормулыРекурсивно(ФормулаСсылка.Формула, Результат);
			РезультатВложеннойФормулы = ЭкранироватьЧисло(РассчитатьФормулу(ФормулаСсылка, Аргументы));
			Результат.Добавить(РезультатВложеннойФормулы);
		Иначе
			Результат.Добавить(Переменная);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ВычислитьФормулу(Выражение)
	Возврат Вычислить(Выражение);
КонецФункции

Функция ЭкранироватьЧисло(ИсхЧисло)
	// Экранируем запрещенные символы
	// 0,5 => 0.5
	// 4 524 => 4524
	РезЧисло = Формат(ИсхЧисло, "ЧРД=.; ЧН=0; ЧГ=0");
	
	Возврат РезЧисло;
КонецФункции

#КонецОбласти
