// Текущие данные таблицы формул. Требуется, т.к. при пролистывании на 
// устройстве эти данные неопределены
&НаКлиенте
Перем ТекСтрокаФормулы;

// Используется в команда ИзменитьДеталь для определения текущей детали,
// т.к. при пролистывании на устройстве, эти данные неопределены.
&НаКлиенте
Перем ТекСтрокаДетали;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ЗначениеВРеквизитФормы(Параметры.Ключ.ПолучитьОбъект(), "Объект");
		;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Наименование = НСтр("ru = 'Мой проект'; en = 'My project'");
	КонецЕсли;
	
	УправлениеФормой();
	
	ПересчитатьСумму()
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РаботаСФотоФормыСервер.ПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ОбновитьНачальнуюСтраницу");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ЗавершитьЗакрытиеФормы", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Проект был изменен. Сохранить изменения?'; en = 'Project was modified. Save changes?'"),
			РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьДокументКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	Если Объект.Формулы.Количество() > 1  Тогда
		Объект.Формулы.Сдвинуть(Объект.Формулы.Количество() - 1, -1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроект(Команда)
	
	// Update date only if this is the first project completion
	Если Не Объект.Завершен Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Объект.Завершен = Не Объект.Завершен;
	
	Для каждого ДетальСтрока Из Объект.Детали Цикл
		ДетальСтрока.Завершен = Объект.Завершен;
	КонецЦикла;
	
	ОбновитьЗавершенностьПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДату(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьИзменениеДаты", ЭтотОбъект);
	ПоказатьВводДаты(Оповещение, Объект.Дата);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФото

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	РаботаСФотоФормыКлиент.НачатьСозданиеНовогоФото(ЭтотОбъект, Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьЗагрузкуФото() Экспорт
	
	ЗагрузитьФотоПроекта();
	
	Элементы.ДекорацияЗагрузкаКартинки.Видимость = Не ФотоЗагружены;
	Элементы.ДекорацияЗагрузкаТекст.Видимость = Не ФотоЗагружены;
	Элементы.ДекорацияПустоеФото.Видимость = ФотоЗагружены;
	
	ОбновитьИнтерфейс();
	ЭтотОбъект.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СсылкаНаПредставлениеДанныхНажатие(Элемент, СтандартнаяОбработка) Экспорт
	РаботаСФотоФормыКлиент.Подключаемый_СсылкаНаПредставлениеДанныхНажатие(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Функция РеквизитФормыДляФотоКлиент() Экспорт
	Возврат РеквизитФормыДляФотоСервер();
КонецФункции

&НаСервере
Функция РеквизитФормыДляФотоСервер()
	Возврат РаботаСФотоФормыСервер.РеквизитФормыДляФото(ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура СтраницыОперацийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	РаботаСФотоФормыКлиент.ПриСменеСтраницыСФото(ЭтотОбъект, ТекущаяСтраница);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФотоПроекта()
	РаботаСФотоФормыСервер.ЗагрузитьФотоПроекта(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеталями

&НаКлиенте
Процедура ДеталиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДетальПроекта) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДеталиПроекта.ФормаВыбора",, Элемент);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
		НазначитьОграничениеТипаЗначХарактеристики(Элементы.Детали.ТекущиеДанные.ПолучитьИдентификатор());
		
		ФизХарактеристики = ТЗХарактеристикиДетали(Элементы.Детали.ТекущиеДанные);
	
		Оповещение = Новый ОписаниеОповещения("ЗавершитьКонвертациюЕдИзм", ЭтотОбъект,
			Элементы.Детали.ТекущиеДанные);
		
		ОткрытьФорму("Справочник.Проекты.Форма.ФормаКонвертацииЕдИзм", 
			Новый Структура("ФизХарактеристики", 
			ФизХарактеристики),,,,,
			Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДеталиПриИзменении(Элемент)
	
	РасссчитатьЗначенияФормул(Элементы.Детали.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКолонкиСтрокиТаблицы(ИменаКолонок, СтрокаТЗ, ЛимитКолонок)
	
	ПараметрыСтроки = Новый Структура;
	
	Для ИндексКолонки = 1 По ЛимитКолонок Цикл
		
		Для каждого ИмяКолонки Из ИменаКолонок Цикл
			ТекИмяКолонки = ИмяКолонки + ИндексКолонки;
			ЭлементКолонки = Элементы.Найти(ТекИмяКолонки);
			Если ЭлементКолонки = Неопределено Тогда
				Прервать;
			КонецЕсли;
			ПараметрыСтроки.Вставить(ТекИмяКолонки, СтрокаТЗ[ТекИмяКолонки]);
			ПараметрыСтроки.Вставить(ТекИмяКолонки + "Заголовок", ЭлементКолонки.Заголовок);
			ПараметрыСтроки.Вставить(ТекИмяКолонки +"Тип", ТипЗнч(СтрокаТЗ[ТекИмяКолонки]));
			ПараметрыСтроки.Вставить("КоличествоКолонок", ИндексКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПараметрыСтроки;
	
КонецФункции

&НаКлиенте
Процедура ДеталиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрока = ?(Элементы.Детали.ТекущиеДанные <> Неопределено, 
		Элементы.Детали.ТекущиеДанные, ТекСтрокаДетали);
	
	ОбработатьВыборДетали(ТекСтрока.ПолучитьИдентификатор(),
		ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборДетали(ИдСтроки, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Объект.Детали.НайтиПоИдентификатору(ИдСтроки);
	ТекСтрока.ДетальПроекта = ВыбранноеЗначение;
	ПриИзмененииДеталиНаСервере(ИдСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДеталь(Команда)
	НоваяСтрока = Объект.Детали.Добавить();
	Элементы.Детали.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ОткрытьФорму("Справочник.ДеталиПроекта.ФормаВыбора",, Элементы.Детали);
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДеталиНаСервере(ИдСтроки)
	
	ФормыПроектыСервер.ПриИзмененииДеталиНаСервере(ЭтотОбъект, ИдСтроки);
	ПересчитатьСумму();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонвертациюЕдИзм(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьКонвертациюЕдИзмСервер(РезультатЗакрытия, ДополнительныеПараметры.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьКонвертациюЕдИзмСервер(РезультатЗакрытия, ИдСтроки)
	
	СтруктураХарактеристики = ПолучитьИзВременногоХранилища(РезультатЗакрытия);
	
	ХарактеристикиМассив = СтруктураХарактеристики.Характеристики;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗХарактеристики.Характеристика КАК Характеристика,
	|	ТЗХарактеристики.Значение КАК Значение
	|ПОМЕСТИТЬ ТЗХарактеристики
	|ИЗ
	|	&РезультатЗакрытия КАК ТЗХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗХарактеристики.Характеристика КАК Характеристика,
	|	ТЗХарактеристики.Характеристика.ЕдиницаИзмерения.ТипХарактеристики КАК ТипХарактеристики,
	|	ТЗХарактеристики.Значение КАК Значение
	|ИЗ
	|	ТЗХарактеристики КАК ТЗХарактеристики");
	Запрос.УстановитьПараметр("РезультатЗакрытия", ХарактеристикиМассив);
	
	ТекСтрока = Объект.Детали.НайтиПоИдентификатору(ИдСтроки);
	ТекСтрока.ДетальПроекта = СтруктураХарактеристики.ДетальПроекта;
	
	// Проставляем данные из БД
	ФормыПроектыСервер.ЗаполнитьХарактеристикиДетали(ЭтотОбъект, ИдСтроки, Запрос.Выполнить().Выгрузить());
	
	РасссчитатьЗначенияФормул(ИдСтроки);
	
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДеталь(Команда)
	
	ТекСтрокаДетали = Элементы.Детали.ТекущиеДанные;
	ОткрытьФорму("Справочник.ДеталиПроекта.ФормаВыбора",, Элементы.Детали);
	
КонецПроцедуры

&НаКлиенте
Функция ТЗХарактеристикиДетали(СтрокаДетали)
	
	ДетальСХарактеристиками = Новый Структура;
	ДетальСХарактеристиками.Вставить("ДетальПроекта", СтрокаДетали.ДетальПроекта);
	
	Аргументы = Новый Массив;
	
	Для Счетчик = 1 По ФормыПроектыКлиентСервер.ЛимитХарактеристик() Цикл
		Аргумент = СтрокаДетали[ФормыПроектыКлиентСервер.ИмяКолонкиХарактеристики() + Счетчик];
		ЗначениеАргумента = СтрокаДетали[ФормыПроектыКлиентСервер.ИмяКолонкиЗначенияХарактеристики() + Счетчик];
		ТипАргумента = Неопределено;
		Если ЗначениеЗаполнено(Аргумент) Тогда
			Аргументы.Добавить(Новый Структура("Характеристика,ТипХарактеристики,Значение", 
				Аргумент, ТипАргумента, ЗначениеАргумента));
		КонецЕсли;
	КонецЦикла;
	
	ДетальСХарактеристиками.Вставить("Характеристики", Аргументы);
	
	Возврат ДетальСХарактеристиками;
	
КонецФункции

&НаКлиенте
Процедура ОтметитьСделано(Команда)
	
	Если Элементы.Детали.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Детали.ТекущиеДанные.Завершен = Не Элементы.Детали.ТекущиеДанные.Завершен;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДеталь(Команда)
	ТекСтрока = Элементы.Детали.ТекущиеДанные;
	НоваяСтрока = Объект.Детали.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	
	Элементы.Детали.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ПересчитатьСумму();
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормулами

&НаКлиенте
Процедура ФормулыДетальПроектаПриИзменении(Элемент)
	
	ПриИзмененииДеталиПроектаФормулыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьДобавлениеНовойФормулы(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Формулы") Тогда
		ЭтотОбъект[ФормыПроектыКлиентСервер.ИмяРеквизитаФормулы() + ИндексПоследнейФормулы] = ВыбранноеЗначение;
	ИначеЕсли ТекСтрокаДетали <> Неопределено И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ДеталиПроекта") Тогда
		ОбработатьВыборДетали(ТекСтрокаДетали.ПолучитьИдентификатор(),
			ВыбранноеЗначение, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормулыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекСтрокаФормулы = Элементы.Формулы.ТекущиеДанные;
	
	ОткрытьФорму("Справочник.Формулы.ФормаВыбора",, Элементы.Формулы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФормулу(Команда)
	ТекСтрокаФормулы = Неопределено;
	ОткрытьФорму("Справочник.Формулы.ФормаВыбора",, Элементы.Формулы);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеНовойФормулы(ВыбранноеЗначение);
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаФормулы <> Неопределено Тогда
		Если Элементы.Формулы.ТекущийЭлемент = Элементы.ФормулыДетальПроекта Тогда
			// кликнули на колонку детали проекта
			ЗавершитьВыборДеталиИзСписка(ТекСтрокаФормулы.ИдСтрокиДетали, ВыбранноеЗначение);
		Иначе
			//кликнули на колонку формулы
			ТекСтрокаФормулы[Элементы.Формулы.ТекущийЭлемент.Имя] = ВыбранноеЗначение;
			РасссчитатьЗначенияФормул(ТекСтрокаФормулы.ИдСтрокиДетали, 
				Элементы.Формулы.ТекущийЭлемент.Имя);
		КонецЕсли;
	Иначе
			
		ДеталиДляВыбора = Новый СписокЗначений;
		Для каждого СтрокаДетали Из Объект.Детали Цикл
			ДеталиДляВыбора.Добавить(СтрокаДетали.ПолучитьИдентификатор(), СтрокаДетали.ДетальПроекта);
		КонецЦикла;
		
		Если ДеталиДляВыбора.Количество() = 1 Тогда
			ЗавершитьВыборДеталиИзСписка(ДеталиДляВыбора[0].Значение, ВыбранноеЗначение);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ЗавершитьВыборДеталиИзСписка", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВыборИзСписка(Оповещение, ДеталиДляВыбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДеталиПроектаФормулыСервер()
	
	Объект.Формулы.Сортировать("ДетальПроекта");
	
	РасссчитатьЗначенияФормул(Элементы.Формулы.ТекущиеДанные.ИдСтрокиДетали, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассив(Элементы.Формулы.ТекущийЭлемент.Имя));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборДеталиИзСписка(ВыбранноеЗначение, ВыбраннаяФормула) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдСтрокиДетали = ВыбранноеЗначение;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ЭлементСпискаЗначений") Тогда
		ИдСтрокиДетали = ВыбранноеЗначение.Значение;
	КонецЕсли;
	
	ДетальПроекта = Объект.Детали.НайтиПоИдентификатору(ИдСтрокиДетали).ДетальПроекта;
	
	СтрокиФормул = Объект.Формулы.НайтиСтроки(Новый Структура("ИдСтрокиДетали", ИдСтрокиДетали));
	Если СтрокиФормул.Количество() <> 0 Тогда
		СтрокаФормулы  = СтрокиФормул[СтрокиФормул.ВГраница()];
	Иначе
		СтрокаФормулы = Объект.Формулы.Добавить();
		СтрокаФормулы.ДетальПроекта = ДетальПроекта;
		СтрокаФормулы.ИдСТрокиДетали = ИдСтрокиДетали;
		Элементы.Формулы.ТекущаяСтрока = СтрокаФормулы.ПолучитьИдентификатор();
	КонецЕсли;
	
	Для Счетчик = 1 По ФормыПроектыКлиентСервер.ЛимитХарактеристик() Цикл
		ИмяКолонкиФОрмулы = ФормыПроектыКлиентСервер.ИмяРеквизитаФормулы()+ Счетчик;
		ЗначениеФормулы = СтрокаФормулы[ИмяКолонкиФормулы];
		Если ЗначениеФормулы = ВыбраннаяФормула Тогда
			Прервать; // такая формула уже введена
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеФормулы) 
			Или Счетчик = ФормыПроектыКлиентСервер.ЛимитХарактеристик() Тогда
			СтрокаФормулы[ИмяКолонкиФормулы] = ВыбраннаяФормула;
			Элементы[ИмяГруппыСтрокиФормулы() + Счетчик].Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяКолонкиФормулы <> Неопределено Тогда
		ЗавершитьВыборДеталиИзСпискаСервер(
			СтрокаФормулы.ПолучитьИдентификатор(), ИмяКолонкиФОрмулы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьВыборДеталиИзСпискаСервер(ИдСтроки, ИмяКолонкиФОрмулы)
	
	Объект.Формулы.Сортировать("ДетальПроекта");
		РасссчитатьЗначенияФормул(Объект.Формулы.НайтиПоИдентификатору(ИдСтроки).ИдСтрокиДетали, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассив(ИмяКолонкиФОрмулы));
	
КонецПроцедуры

&НаСервере
Функция ДобавитьРеквизитФормыДляФормулы(ИдКолонки, РодительЭлементаКолонки)
	
	ИмяРеквизита = ФормыПроектыКлиентСервер.ИмяРеквизитаФормулы() + ИдКолонки;
	
	ЭтоНовый = Ложь;
	Реквизит = ФормыОбщиеДействияСервер.НайтиДобавитьРеквизитФормы(ЭтоНовый,
		ЭтотОбъект,
		ИмяРеквизита, 
		"СправочникСсылка.Формулы", 
		"Объект.Формулы"
	);
	
	Если Не ЭтоНовый Тогда
		Возврат Реквизит.Имя;
	КонецЕсли;
	
	КолонкаРеквизит = Элементы.Добавить(
		ИмяРеквизита, 
		Тип("ПолеФормы"),
		РодительЭлементаКолонки
	);
	
	КолонкаРеквизит.ПутьКДанным = Реквизит.Путь + "." + ИмяРеквизита;
	КолонкаРеквизит.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Возврат КолонкаРеквизит.Имя;
	
КонецФункции

&НаСервере
Функция ДобавитьРеквизитФормыДляЗначенияФормулы(ИдКолонки, РодительЭлементаКолонки)
	
	ИмяРеквизита = ФормыПроектыКлиентСервер.ИмяРеквизитаЗначениеФормулы() + ИдКолонки;
	
	ЭтоНовый = Ложь;
	Реквизит = ФормыОбщиеДействияСервер.НайтиДобавитьРеквизитФормы(ЭтоНовый,
		ЭтотОбъект,
		ИмяРеквизита, 
		"Число", 
		"Объект.Формулы"
	);
	
	Если Не ЭтоНовый Тогда
		Возврат Реквизит.Имя;
	КонецЕсли;
	
	КолонкаРеквизит = Элементы.Добавить(
		ИмяРеквизита, 
		Тип("ПолеФормы"),
		РодительЭлементаКолонки
	);
	
	КолонкаРеквизит.ПутьКДанным = Реквизит.Путь + "." + ИмяРеквизита;
	КолонкаРеквизит.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаРеквизит.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаРеквизит.КнопкаВыбора = Ложь;
	
	Возврат КолонкаРеквизит.Имя;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ФормулаНажатие(Элемент, СтандартнаяОбработка)
	//ОткрытьФорму("Справочник.Формулы.ФормаВыбора",, Элемент);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппыСтрокиФормулы()
	Возврат "ФормулыГруппаФормула";
КонецФункции

&НаСервере
Процедура РасссчитатьЗначенияФормул(ИдСтрокиДетали, знач ИменаФормул = Неопределено)
	
	ФормыПроектыСервер.РасссчитатьЗначенияФормул(ЭтотОбъект, ИдСтрокиДетали, ИменаФормул);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	ПоказатьЗаполненныеСтрокиТаблицы(Объект.Детали, ФормыПроектыКлиентСервер.ИмяКолонкиХарактеристики(), ФормыПроектыКлиентСервер.ИмяГруппыДеталиХарактеристики());
	ПоказатьЗаполненныеСтрокиТаблицы(Объект.Формулы, ФормыПроектыКлиентСервер.ИмяРеквизитаФормулы(), ИмяГруппыСтрокиФормулы());
	
	ОбновитьЗавершенностьПроекта();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьКолонку(знач КоллекцияСтрок, ИмяКолонки, ТолькоУникальныеЗначения = Ложь)
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, ИмяКолонки, ТолькоУникальныеЗначения);
КонецФункции

&НаСервере
Процедура ПоказатьЗаполненныеСтрокиТаблицы(ТЧ, ИмяПроверяемогоЭлемента, ИмяЭлементаВидимости)
	
	Для каждого СтрокаТаб Из ТЧ Цикл
		Для Счетчик = 1 По ФормыПроектыКлиентСервер.ЛимитХарактеристик() Цикл
			Если ЗначениеЗаполнено(СтрокаТаб[ИмяПроверяемогоЭлемента + Счетчик]) Тогда
				Элементы[ИмяЭлементаВидимости + Счетчик].Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗавершенностьПроекта()
	
	Если Объект.Завершен Тогда
		Элементы.ЗавершитьПроект.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
		Элементы.ЗавершитьПроект.Картинка = БиблиотекаКартинок.Готово;
		Элементы.ЗавершитьПроект.Заголовок = НСтр("ru = 'Завершен'; en = 'Completed'");
	Иначе
		Элементы.ЗавершитьПроект.Заголовок = НСтр("ru = 'В работе'; en = 'Working'");
		Элементы.ЗавершитьПроект.Картинка = БиблиотекаКартинок.Hammer;
		Элементы.ЗавершитьПроект.ЦветТекста = Новый Цвет(102,102,153);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеДаты(Дата, ДополнительныеПараметры) Экспорт
	
	Объект.Дата = Дата;
	
КонецПроцедуры

&НаСервере
Процедура НазначитьОграничениеТипаЗначХарактеристики(ИдСтроки)
	
	ФормыПроектыСервер.НазначитьОграничениеТипаЗначХарактеристики(ЭтотОбъект, 
		ИдСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеТипаХарактеристикиПоЗначению(Значение)
	Возврат ФормыОбщиеДействияСервер.ОписаниеТипаХарактеристикиПоЗначению(Значение);
КонецФункции

&НаСервере
Функция ЗаписатьДокумент()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	НачатьТранзакцию();
	ТекущийОбъект.Записать();
	ПриЗаписиНаСервере(Ложь, ТекущийОбъект, Неопределено);
	ЗафиксироватьТранзакцию();
	
	Возврат ТекущийОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьДокументКлиент()

	Ссылка = ЗаписатьДокумент();
	Модифицированность = Ложь;
	ОповеститьОбИзменении(Ссылка);
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗакрытиеФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьДокументКлиент();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСумму()
	
	Объект.Сумма = 0;
	
	Для каждого СтрокаДетали Из Объект.Детали Цикл
		Для Счетчик = 1 По ФормыПроектыКлиентСервер.ЛимитХарактеристик() Цикл
			Аргумент = СтрокаДетали[ФормыПроектыКлиентСервер.ИмяКолонкиХарактеристики() + Счетчик];
			ЗначениеАргумента = СтрокаДетали[ФормыПроектыКлиентСервер.ИмяКолонкиЗначенияХарактеристики() + Счетчик];
			ТипАргумента = Неопределено;
			Если Аргумент = Справочники.ФизическиеХарактеристики.Ценаруб Тогда
				Попытка
					Объект.Сумма = Объект.Сумма + ЗначениеАргумента;
				Исключение
					// Проглатываем исключение, попалось не число
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеталиПослеУдаления(Элемент)
	ПересчитатьСумму();
КонецПроцедуры


#КонецОбласти