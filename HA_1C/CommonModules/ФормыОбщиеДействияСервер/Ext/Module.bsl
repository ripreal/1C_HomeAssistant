
//////////////////////////////////////////////////////////////////////////////////////////
// Дополнительная обработка форм объектов
// 
//////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.Элементы.ФормаУдалить.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	
КонецПроцедуры

Процедура ПривестиРеквизитКТипуХарактеристики(РеквизитФормы, ТипФизическойХарактеристики) Экспорт
	
	ОписаниеТипа = ОписаниеТипаХарактеристики(ТипФизическойХарактеристики);
	РеквизитФормы = ОписаниеТипа.ПривестиЗначение(РеквизитФормы);
	
КонецПроцедуры

Функция ОписаниеТипаХарактеристики(ТипФизическойХарактеристики) Экспорт
	
	ОписаниеТипа = Новый ОписаниеТипов;
	Если ТипФизическойХарактеристики = Перечисления.ТипыХарактеристик.ЦелоеЧисло Тогда
		ОписаниеТипа = Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	ИначеЕсли ТипФизическойХарактеристики = Перечисления.ТипыХарактеристик.ДробноеЧисло Тогда
		ОписаниеТипа = Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ИначеЕсли ТипФизическойХарактеристики = Перечисления.ТипыХарактеристик.Строка Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Строка");
	ИначеЕсли ТипФизическойХарактеристики = Перечисления.ТипыХарактеристик.Булево Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Булево");
	КонецЕсли;
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ВсеТипыФизическихХарактеристик() Экспорт
	
	МассивыТипов = Новый Массив;
	МассивыТипов.Добавить(Тип("Строка"));
	МассивыТипов.Добавить(Тип("Число"));
	МассивыТипов.Добавить(Тип("Булево"));
	
	ОписаниеТипа = Новый ОписаниеТипов(МассивыТипов);
	
	Возврат ОписаниеТипа;
	
КонецФункции

Функция ОписаниеТипаХарактеристикиПоЗначению(ЗначениеХарактеристики) Экспорт

	ТипХарактеристики = Неопределено;
	
	Если ТипЗнч(ЗначениеХарактеристики) = Тип("Число") Тогда
		// TODO Нужно улучшить реализацию
		//Если Окр(ЗначениеХарактеристики, 0) <> ЗначениеХарактеристики Тогда
			ТипХарактеристики = Перечисления.ТипыХарактеристик.ДробноеЧисло;
		//Иначе
		//	ТипХарактеристики = Перечисления.ТипыХарактеристик.ЦелоеЧисло;
		//КонецЕсли;
	ИначеЕсли ТипЗнч(ЗначениеХарактеристики) = Тип("Строка") Тогда
		ТипХарактеристики = Перечисления.ТипыХарактеристик.Строка;
	ИначеЕсли ТипЗнч(ЗначениеХарактеристики) = Тип("Булево") Тогда
		ТипХарактеристики = Перечисления.ТипыХарактеристик.Булево;
	КонецЕсли;
	
	Возврат ОписаниеТипаХарактеристики(ТипХарактеристики);

КонецФункции

#Область ДинамическаяМодификацияФормы

// Находит / добавляет реквизит формы и элемент формы для реквизита.
//
// Параметры:
//  Форма                - 	 - форма, на которую помещаются реквизит и элемент.
//  ИмяРеквизита         - 	 - имя реквизита и элемента формы.
//  ЗначениеРеквизита    - 	 - значение, которое будет присвоено реквизиту формы.
//  Родитель             - 	 - Родитель элемента на форме, если не передан, то элемент помещается на верний уровень.
//  ТипЗначения          - 	 - Желаемый тип нового реквизита, если не передан, то берется тип переданного значения.
//  
// 
// Возвращаемое значение:
//  ЭлементФормы - найденный / добавленный элемент формы.
//
Функция ДобавитьРеквизитСоСвязаннымЭлементомНаФорму(Форма, ИмяРеквизита, ЗначениеРеквизита, Родитель = Неопределено, ТипЗначения = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	ЭтотОбъект = Форма;
	
	ИмяРеквизита = ИмяРеквизита;
	
	Если ТипЗначения = Неопределено Тогда
		ТипРеквизита = ОбщегоНазначения.ЗначениеВМассив(ТипЗнч(ЗначениеРеквизита));
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
		ТипРеквизита = ТипЗначения;
	ИначеЕсли ТипЗнч(ТипЗначения) = Тип("ОписаниеТипов") Тогда
		ТипРеквизита = ТипЗначения;
	Иначе
		ТипРеквизита = ОбщегоНазначения.ЗначениеВМассив(ТипЗначения);
	КонецЕсли;
	
	РеквизитХарактеристики = ФормыОбщиеДействияСервер.НайтиДобавитьРеквизитФормы(
		, 
		ЭтотОбъект, 
		ИмяРеквизита, 
		ТипРеквизита
	);
	ЭтотОбъект[ИмяРеквизита] = ЗначениеРеквизита;
	
	ЭлементРеквизита = НайтиДобавитьЭлементФормы(
		ЭтотОбъект,
		ИмяРеквизита,
		Тип("ПолеФормы"),
		Родитель
	);
	Если Не ЗначениеЗаполнено(ЭлементРеквизита.ПутьКДанным) Тогда
		ЭлементРеквизита.ПутьКДанным = ИмяРеквизита;
	КонецЕсли;
	
	Возврат ЭлементРеквизита;
	
КонецФункции

// Ищет по имени существующий реквизит. При отсутствии добавляет новый с заданными параметрами
//
// Параметры:
//  ЭтоНовый     - Булево - исходящий.
//  Форма		 - УправляемаяФорма - 
//  ИмяРеквизита - Строка - 
//  ТипРеквизита - Строка, ОписаниеТипов - 
//  Путь		 - Строка - 
// 
// Возвращаемое значение:
//  РеквизитФормы - найденный или новый реквизит
//
Функция НайтиДобавитьРеквизитФормы(ЭтоНовый = Ложь, Форма, ИмяРеквизита, ТипРеквизита, Путь = "") Экспорт
	
	Реквизит = НайтиРеквизитФормы(Форма, ИмяРеквизита, Путь);
	ЭтоНовый = (Реквизит = Неопределено);
	
	Если Не ЭтоНовый Тогда
		Возврат Реквизит;
	КонецЕсли;
	
	// Реквизит не нашли. Создадим новый реквизит
	ДобавляемыеРеквизиты = Новый Массив;
	Реквизит = Новый РеквизитФормы(ИмяРеквизита, 
		?(ТипЗнч(ТипРеквизита) = Тип("ОписаниеТипов"), ТипРеквизита, Новый ОписаниеТипов(ТипРеквизита)), 
		Путь
	);
		
	Реквизит.СохраняемыеДанные = Истина;
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Возврат Реквизит;
	
КонецФункции

Функция НайтиРеквизитФормы(Форма, ИмяРеквизита, Путь = "")
	
	Реквизиты = Форма.ПолучитьРеквизиты(Путь);
	Реквизит = Неопределено;
	Для каждого СтрокаРеквизита Из Реквизиты Цикл
		Если СтрокаРеквизита.Имя = ИмяРеквизита Тогда
			Возврат СтрокаРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиДобавитьЭлементФормы(Форма, ИмяЭлемента, ТипЭлемента, Родитель = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элемент = Элементы.Найти(ИмяЭлемента);
	
	Если Элемент <> Неопределено Тогда
		Возврат Элемент;
	КонецЕсли;
	
	Возврат Элементы.Добавить(
		ИмяЭлемента, 
		ТипЭлемента,
		Родитель
	);
	
КонецФункции

Функция НайтиДобавитьРодителяКолонок(Форма, ИмяРодителяКолонки, Родитель = Неопределено) Экспорт
	
	РодительКолонки = Форма.Элементы.Найти(ИмяРодителяКолонки);
	Если РодительКолонки = Неопределено Тогда

		РодительКолонки = Форма.Элементы.Добавить(
			ИмяРодителяКолонки,
			Тип("ГруппаФормы"),
			Родитель
		);
		
		РодительКолонки.Группировка = ГруппировкаКолонок.Горизонтальная;
		РодительКолонки.ОтображатьВШапке = Истина;
		РодительКолонки.ОтображатьЗаголовок = Истина;
		
	КонецЕсли;
	
	Возврат РодительКолонки;
	
КонецФункции

Функция НайтиДобавитьГруппуФормы(Форма, ИмяГруппы, Родитель = Неопределено) Экспорт
	
	ГруппаФормы = Форма.Элементы.Найти(ИмяГруппы);
	Если ГруппаФормы = Неопределено Тогда
	
		ГруппаФормы = Форма.Элементы.Добавить(
			ИмяГруппы,
			Тип("ГруппаФормы"),
			Родитель
		);
		ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаФормы.ОтображатьЗаголовок = Ложь;
		
	КонецЕсли;
	
	Возврат ГруппаФормы;
	
КонецФункции

#КонецОбласти

#КонецОбласти